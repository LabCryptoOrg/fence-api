/***************************************************************
 * Generated by Hottentot CC Generator
 * Date: 05-05-2016 01:33:01
 * Name: transport_message.h
 * Description:
 *   This file contains definition of TransportMessage class.
 ***************************************************************/

#ifndef _ORG_LABCRYPTO_FENCE_TRANSPORT__TRANSPORT_MESSAGE_H_
#define _ORG_LABCRYPTO_FENCE_TRANSPORT__TRANSPORT_MESSAGE_H_

#include <string>

#include <org/labcrypto/hottentot/primitives.h>


#include "enums.h"


namespace org {
namespace labcrypto {
namespace fence {
namespace transport {
  class TransportMessage : public ::org::labcrypto::hottentot::Serializable {
  public:
    TransportMessage() {
    }
    TransportMessage(const TransportMessage &);
    TransportMessage(TransportMessage *);
    virtual ~TransportMessage() {}
  public:
    inline ::org::labcrypto::hottentot::UInt64 GetMasterMId() const {
      return masterMId_;
    }
    inline void SetMasterMId(::org::labcrypto::hottentot::UInt64 masterMId) {
      masterMId_ = masterMId;
    }
    inline ::org::labcrypto::hottentot::UInt32 GetSlaveId() const {
      return slaveId_;
    }
    inline void SetSlaveId(::org::labcrypto::hottentot::UInt32 slaveId) {
      slaveId_ = slaveId;
    }
    inline ::org::labcrypto::hottentot::UInt64 GetSlaveMId() const {
      return slaveMId_;
    }
    inline void SetSlaveMId(::org::labcrypto::hottentot::UInt64 slaveMId) {
      slaveMId_ = slaveMId;
    }
    inline ::org::labcrypto::hottentot::UInt64 GetRelMId() const {
      return relMId_;
    }
    inline void SetRelMId(::org::labcrypto::hottentot::UInt64 relMId) {
      relMId_ = relMId;
    }
    inline ::org::labcrypto::hottentot::Utf8String GetLabel() const {
      return label_;
    }
    inline void SetLabel(::org::labcrypto::hottentot::Utf8String label) {
      label_ = label;
    }
    inline ::org::labcrypto::hottentot::ByteArray GetContent() const {
      return content_;
    }
    inline void SetContent(::org::labcrypto::hottentot::ByteArray content) {
      content_ = content;
    }
  public:
    virtual unsigned char * Serialize(uint32_t * /* Pointer to length */);
    virtual void Deserialize(unsigned char * /* Data */, uint32_t /* Data length */);
  private:
    ::org::labcrypto::hottentot::UInt64 masterMId_;
    ::org::labcrypto::hottentot::UInt32 slaveId_;
    ::org::labcrypto::hottentot::UInt64 slaveMId_;
    ::org::labcrypto::hottentot::UInt64 relMId_;
    ::org::labcrypto::hottentot::Utf8String label_;
    ::org::labcrypto::hottentot::ByteArray content_;
  };
} // END OF NAMESPACE transport
} // END OF NAMESPACE fence
} // END OF NAMESPACE labcrypto
} // END OF NAMESPACE org

#endif