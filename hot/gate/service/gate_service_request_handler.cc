/****************************************************************************
 * Generated by Hottentot CC Generator
 * Date: 05-05-2016 01:33:01
 * Name: gate_service_request_handler.cc
 * Description:
 *   This file contains implementation of service's request handler class.
 ****************************************************************************/
 
#include <string.h>

#include <org/labcrypto/hottentot/runtime/request.h>
#include <org/labcrypto/hottentot/runtime/response.h>

#include "gate_service_request_handler.h"
#include "abstract_gate_service.h"
#include "gate_service.h"
#include "../message.h"


namespace org {
namespace labcrypto {
namespace fence {
namespace service {
  void 
  GateServiceRequestHandler::HandleRequest(::org::labcrypto::hottentot::runtime::Request &request, ::org::labcrypto::hottentot::runtime::Response &response) {
    if (request.GetMethodId() == 3903399507) {
      ::org::labcrypto::fence::service::AbstractGateService *serviceObject = 
        dynamic_cast< ::org::labcrypto::fence::service::AbstractGateService*>(service_);
      /*
       * Deserialization and making input variables
       */
      ::org::labcrypto::fence::Message message;
      message.Deserialize(request.GetArgumentData(0), request.GetArgumentLength(0));
      /*
       * Calling service method
       */
      ::org::labcrypto::hottentot::runtime::service::HotContext hotContext;
      
      ::org::labcrypto::hottentot::UInt64 result;
      try {
        serviceObject->Enqueue(message, result, hotContext);
      } catch (std::exception &e) {
        hotContext.SetFaultyResponse(e.what(), 50);
      } catch (...) {
        hotContext.SetFaultyResponse("Unknown server side exception.", 51);
      }
      /*
       * Serializiation of returned object
       */
      unsigned char *serializedData = 0;
      uint32_t serializedDataLength = 0;
      if (hotContext.GetResponseStatusCode() == 0) {
        serializedData = result.Serialize(&serializedDataLength);
      } else {
        ::org::labcrypto::hottentot::Utf8String faultMessage(hotContext.GetFaultMessage());
        serializedData = faultMessage.Serialize(&serializedDataLength);
      }
      response.SetStatusCode(hotContext.GetResponseStatusCode());
      response.SetData(serializedData);
      response.SetDataLength(serializedDataLength);
      return;
    }
    if (request.GetMethodId() == 3843562469) {
      ::org::labcrypto::fence::service::AbstractGateService *serviceObject = 
        dynamic_cast< ::org::labcrypto::fence::service::AbstractGateService*>(service_);
      /*
       * Deserialization and making input variables
       */
      ::org::labcrypto::hottentot::UInt64 id;
      id.Deserialize(request.GetArgumentData(0), request.GetArgumentLength(0));
      /*
       * Calling service method
       */
      ::org::labcrypto::hottentot::runtime::service::HotContext hotContext;
      
      ::org::labcrypto::hottentot::UInt16 result;
      try {
        serviceObject->GetStatus(id, result, hotContext);
      } catch (std::exception &e) {
        hotContext.SetFaultyResponse(e.what(), 50);
      } catch (...) {
        hotContext.SetFaultyResponse("Unknown server side exception.", 51);
      }
      /*
       * Serializiation of returned object
       */
      unsigned char *serializedData = 0;
      uint32_t serializedDataLength = 0;
      if (hotContext.GetResponseStatusCode() == 0) {
        serializedData = result.Serialize(&serializedDataLength);
      } else {
        ::org::labcrypto::hottentot::Utf8String faultMessage(hotContext.GetFaultMessage());
        serializedData = faultMessage.Serialize(&serializedDataLength);
      }
      response.SetStatusCode(hotContext.GetResponseStatusCode());
      response.SetData(serializedData);
      response.SetDataLength(serializedDataLength);
      return;
    }
    if (request.GetMethodId() == 4079569996) {
      ::org::labcrypto::fence::service::AbstractGateService *serviceObject = 
        dynamic_cast< ::org::labcrypto::fence::service::AbstractGateService*>(service_);
      /*
       * Deserialization and making input variables
       */
      ::org::labcrypto::hottentot::UInt64 id;
      id.Deserialize(request.GetArgumentData(0), request.GetArgumentLength(0));
      /*
       * Calling service method
       */
      ::org::labcrypto::hottentot::runtime::service::HotContext hotContext;
      
      try {
        serviceObject->Discard(id, hotContext);
      } catch (std::exception &e) {
        hotContext.SetFaultyResponse(e.what(), 50);
      } catch (...) {
        hotContext.SetFaultyResponse("Unknown server side exception.", 51);
      }
      /*
       * Serializiation of returned object
       */
      unsigned char *serializedData = 0;
      uint32_t serializedDataLength = 0;
      if (hotContext.GetResponseStatusCode() == 0) {
        serializedData = 0;
      } else {
        ::org::labcrypto::hottentot::Utf8String faultMessage(hotContext.GetFaultMessage());
        serializedData = faultMessage.Serialize(&serializedDataLength);
      }
      response.SetStatusCode(hotContext.GetResponseStatusCode());
      response.SetData(serializedData);
      response.SetDataLength(serializedDataLength);
      return;
    }
    if (request.GetMethodId() == 2052745702) {
      ::org::labcrypto::fence::service::AbstractGateService *serviceObject = 
        dynamic_cast< ::org::labcrypto::fence::service::AbstractGateService*>(service_);
      /*
       * Deserialization and making input variables
       */
      ::org::labcrypto::hottentot::Utf8String label;
      label.Deserialize(request.GetArgumentData(0), request.GetArgumentLength(0));
      /*
       * Calling service method
       */
      ::org::labcrypto::hottentot::runtime::service::HotContext hotContext;
      
      ::org::labcrypto::hottentot::Boolean result;
      try {
        serviceObject->HasMore(label, result, hotContext);
      } catch (std::exception &e) {
        hotContext.SetFaultyResponse(e.what(), 50);
      } catch (...) {
        hotContext.SetFaultyResponse("Unknown server side exception.", 51);
      }
      /*
       * Serializiation of returned object
       */
      unsigned char *serializedData = 0;
      uint32_t serializedDataLength = 0;
      if (hotContext.GetResponseStatusCode() == 0) {
        serializedData = result.Serialize(&serializedDataLength);
      } else {
        ::org::labcrypto::hottentot::Utf8String faultMessage(hotContext.GetFaultMessage());
        serializedData = faultMessage.Serialize(&serializedDataLength);
      }
      response.SetStatusCode(hotContext.GetResponseStatusCode());
      response.SetData(serializedData);
      response.SetDataLength(serializedDataLength);
      return;
    }
    if (request.GetMethodId() == 707805524) {
      ::org::labcrypto::fence::service::AbstractGateService *serviceObject = 
        dynamic_cast< ::org::labcrypto::fence::service::AbstractGateService*>(service_);
      /*
       * Deserialization and making input variables
       */
      ::org::labcrypto::hottentot::Utf8String label;
      label.Deserialize(request.GetArgumentData(0), request.GetArgumentLength(0));
      /*
       * Calling service method
       */
      ::org::labcrypto::hottentot::runtime::service::HotContext hotContext;
      
      ::org::labcrypto::fence::Message result;
      try {
        serviceObject->PopNext(label, result, hotContext);
      } catch (std::exception &e) {
        hotContext.SetFaultyResponse(e.what(), 50);
      } catch (...) {
        hotContext.SetFaultyResponse("Unknown server side exception.", 51);
      }
      /*
       * Serializiation of returned object
       */
      unsigned char *serializedData = 0;
      uint32_t serializedDataLength = 0;
      if (hotContext.GetResponseStatusCode() == 0) {
        serializedData = result.Serialize(&serializedDataLength);
      } else {
        ::org::labcrypto::hottentot::Utf8String faultMessage(hotContext.GetFaultMessage());
        serializedData = faultMessage.Serialize(&serializedDataLength);
      }
      response.SetStatusCode(hotContext.GetResponseStatusCode());
      response.SetData(serializedData);
      response.SetDataLength(serializedDataLength);
      return;
    }
    if (request.GetMethodId() == 1588665081) {
      ::org::labcrypto::fence::service::AbstractGateService *serviceObject = 
        dynamic_cast< ::org::labcrypto::fence::service::AbstractGateService*>(service_);
      /*
       * Deserialization and making input variables
       */
      ::org::labcrypto::hottentot::UInt64 id;
      id.Deserialize(request.GetArgumentData(0), request.GetArgumentLength(0));
      /*
       * Calling service method
       */
      ::org::labcrypto::hottentot::runtime::service::HotContext hotContext;
      
      try {
        serviceObject->Ack(id, hotContext);
      } catch (std::exception &e) {
        hotContext.SetFaultyResponse(e.what(), 50);
      } catch (...) {
        hotContext.SetFaultyResponse("Unknown server side exception.", 51);
      }
      /*
       * Serializiation of returned object
       */
      unsigned char *serializedData = 0;
      uint32_t serializedDataLength = 0;
      if (hotContext.GetResponseStatusCode() == 0) {
        serializedData = 0;
      } else {
        ::org::labcrypto::hottentot::Utf8String faultMessage(hotContext.GetFaultMessage());
        serializedData = faultMessage.Serialize(&serializedDataLength);
      }
      response.SetStatusCode(hotContext.GetResponseStatusCode());
      response.SetData(serializedData);
      response.SetDataLength(serializedDataLength);
      return;
    }
    char errorMessage[] = "Method not found.";
    response.SetStatusCode(1);
    response.SetData((unsigned char*)errorMessage);
    response.SetDataLength(strlen(errorMessage));
  }
} // END OF NAMESPACE service
} // END OF NAMESPACE fence
} // END OF NAMESPACE labcrypto
} // END OF NAMESPACE org