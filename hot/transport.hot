/*  The MIT License (MIT)
 *
 *  Copyright (c) 2015 LabCrypto Org.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
 
module org.labcrypto.fence.transport {
  enum TransportMessageStatus {
    0 = Unknown;
    200 = Arrived;
    201 = ReadyForPop;
    202 = PoppedButNotAcked;
    203 = PoppedAndAcked;
    204 = EnqueuedForTransmission;
    205 = EnqueueFailed;
    206 = ReadyForRetrieval;
    207 = RetrievedButNotAcked;
    208 = RetrievedAndAcked;
  };
  struct EnqueueReport {
    uint64 masterMId ord(1);
    uint64 slaveMId ord(2);
    bool failed ord(3);
    string errorMessage ord(4);
  };
  struct TransportMessage {
    uint64 masterMId ord(1);
    uint32 slaveId ord(2);
    uint64 slaveMId ord(3);
    uint64 relMId ord(4);
    string label ord(5);
    data content ord(6);
  };
  stateless service Transport {
    list<EnqueueReport> transmit(list<TransportMessage> messages);
    list<TransportMessage> retrieve(uint32 slaveId);
    void ack(list<uint64> masterMIds);
    uint16 getStatus(uint64 masterMId);
  };
  stateless service TransportMonitor {
    string getCurrentStat();
  };
};